import Vue from 'vue'
import Vuex from 'vuex'

Vue.use(Vuex)

//仓库:store | 声明全局可用
const store = new Vuex.Store({ 

    // this.store.state.'xxx' 状态
    state: {
      UserID: '未登录',
      isLoggedIn: false,

      count: 0,
      todos: [
          {id: 1, text: '前端', done: true},
          {id: 2, text: '吃dai', done: true},
      ],
        

    },

    // this.$store.commit('xxx') 提交突变
    mutations: {
      login(state, username) {
        state.isLoggedIn = true;
        state.UserID = username;
      },
      logout(state) {
        state.isLoggedIn = false;
        state.UserID = '';
      },
      add (state, num) {
          // 状态传进来加
          state.count += num;
      },
      abb (state, num) {
          // 状态传进来减
          state.count -= num;
      },
    },

    // 获取状态(state)的派生状态(过滤/计数)   注意，getter 在通过属性访问时是作为 Vue 的响应式系统的一部分缓存其中的
    getters: {
      count: state => state.count,
      doneTodos: state => {
        return state.todos.filter(todo => todo.done)  // filter创建一个新数组，其包含通过所提供函数实现的测试的所有元素,它不会改变原数组
      },
      doneTodosCount:(state, getters) =>{
        return getters.doneTodos.length
      }

    },


     // 派发异步操作的逻辑(不做修改，修改只在mutations实现)
    actions: {
      delayincrement(store, num){
        setTimeout(() => {
        store.commit('increment', num);
      }, 2000)
      }
    },
    modules: {
      // 可分模块
    }
});

export default store;







<template>
  <div id="Home">
    <KinesisContainer>
      <KinesisElement :strength="100">
        <img alt="Vue logo" src="@/assets/mirror.png" class="animate__heartBeat">
      </KinesisElement>
    </KinesisContainer>
    <!-- <p>{{ ShuZuCount }}</p> -->
    <p>{{ count }}</p>
    <el-row>
      <el-button type="success" icon="el-icon-check" circle @click="() => abbbb(1)"></el-button>
      <el-button type="success" icon="el-icon-check" circle @click="() => adddd(1)"></el-button>
    </el-row>
    <ul  class="animate__heartBeat">
      <li v-for="todo in ShuZu" :key="todo.id">{{ todo.text }}</li>
    </ul>

    <!-- 页码导航栏 -->
    <hr><section>
      <b-pagination
      :total="total"
      v-model="current"
      :range-before="rangeBefore"
      :range-after="rangeAfter"
      :order="order"
      :size="size"
      :simple="isSimple"
      :rounded="isRounded"
      :per-page="perPage"
      :icon-prev="prevIcon"
      :icon-next="nextIcon"
      aria-next-label="Next page"
      aria-previous-label="Previous page"
      aria-page-label="Page"
      aria-current-label="Current page"
      :page-input="hasInput"
      :page-input-position="inputPosition"
      :debounce-page-input="inputDebounce"
      />
    </section><hr>


  </div>
</template>




<script>

import { mapState,mapGetters,mapMutations } from 'vuex';

export default{
  name: 'Home',

  computed:{
    ...mapState([
        'count',
        'todos',
        'UserID',
    ]),
    ...mapGetters({                  // 如果你想将一个 getter 属性另取一个名字，使用对象形式：
      ShuZu: 'doneTodos',
      ShuZuCount: 'doneTodosCount',
    }),
  },

  methods:{
    ...mapMutations({
      adddd: 'add', // 将 `this.add()` 映射为 `this.$store.commit('increment')`
      abbbb: 'abb',
    })
    // @click="add"
    // @click="abb"
    // add(){this.$store.commit("add", 5)},
    // abb(){this.$store.commit("abb", 5)},
  },

  // 页码导航栏data
  data() {
    return {
      total: 200,     // 总记录数
      current: 1,     // 当前页数
      perPage: 10,    // 每页记录数
      rangeBefore: 2, // 前面有几页
      rangeAfter: 2,  // 后面有几页
      order: 'is-centered',      // 升序或降序    is-right
      size: 'is-medium',       // 组件的大小  is-small is-medium   is-large
      isSimple: false,    // 简化模式
      isRounded: true,   // 圆角样式
      hasInput: true,    // 页码输入框
      prevIcon: 'chevron-left',
      nextIcon: 'chevron-right',
      inputPosition: '',    // 页码输入框的位置
      inputDebounce: '500'   // 页码输入的防抖时间
    }
  },

}

</script>

<style scoped>
#Home{
  margin: 40px 0 0;
  color: #42b983;
  font-weight: bold; 
  font-size: 44px;
}

h3 {
margin: 40px 0 0;
}
ul {
list-style-type: none;
padding: 0;
}
li {
display: inline-block;
margin: 0 10px;
}
a {
color: #42b983;
}
</style>

